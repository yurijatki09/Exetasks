-- MySQL Script generated by MySQL Workbench
-- Wed Nov  6 10:58:51 2019
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema db_exetasks
-- -----------------------------------------------------
-- Autores: Amanda Neves / Fernando Ribeiro / João Trugilo / Yuri Jatki.
-- Data de criação: 06/11/2019.
-- Data de atualização: --/--/--.
-- Descrição: Banco de dados para armazenar usuários, grupos, atividades e interesses.

-- -----------------------------------------------------
-- Schema db_exetasks
--
-- Autores: Amanda Neves / Fernando Ribeiro / João Trugilo / Yuri Jatki.
-- Data de criação: 06/11/2019.
-- Data de atualização: --/--/--.
-- Descrição: Banco de dados para armazenar usuários, grupos, atividades e interesses.
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `db_exetasks` DEFAULT CHARACTER SET utf8 COLLATE utf8_bin ;
USE `db_exetasks` ;

-- -----------------------------------------------------
-- Table `db_exetasks`.`usuarios`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_exetasks`.`usuarios` (
  `id` INT ZEROFILL NOT NULL AUTO_INCREMENT COMMENT 'ID do usuário.',
  `nome` VARCHAR(20) NOT NULL COMMENT 'Nome do usuário.',
  `usuario` VARCHAR(20) NOT NULL COMMENT 'Apelido do usuário.',
  `senha` CHAR(32) NOT NULL COMMENT 'Senha do usuário.',
  `email` VARCHAR(40) NOT NULL COMMENT 'E-mail do usuário.',
  `data_nasc` DATE NOT NULL COMMENT 'Data de nascimento do usuário.',
  `sexo` CHAR(1) NOT NULL COMMENT 'Sexo do usuário.',
  `tipo` CHAR(1) NOT NULL COMMENT 'Serve para determinar se o usuário é professor ou estudante.',
  `nivel` INT NOT NULL COMMENT 'Nível do usuário.',
  `experiencia` INT NOT NULL COMMENT 'Total de experiência que o usuário possui.',
  `foto` VARCHAR(255) NOT NULL COMMENT 'Avatar do usuário.',
  PRIMARY KEY (`id`),
  UNIQUE INDEX `usuario_UNIQUE` (`usuario` ASC),
  UNIQUE INDEX `email_UNIQUE` (`email` ASC))
ENGINE = InnoDB
COMMENT = 'Tabela para armazenar usuários do sistema.';


-- -----------------------------------------------------
-- Table `db_exetasks`.`interesses`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_exetasks`.`interesses` (
  `id` INT ZEROFILL NOT NULL AUTO_INCREMENT COMMENT 'ID do interesse.',
  `nome` VARCHAR(20) NOT NULL COMMENT 'Nome do interesse.',
  PRIMARY KEY (`id`))
ENGINE = InnoDB
COMMENT = 'Tabela para armazenar os interesses do sistema.';


-- -----------------------------------------------------
-- Table `db_exetasks`.`grupos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_exetasks`.`grupos` (
  `id` INT ZEROFILL NOT NULL AUTO_INCREMENT COMMENT 'ID do grupo.',
  `nome` VARCHAR(20) NOT NULL COMMENT 'Nome do grupo.',
  `descricao` TEXT NOT NULL COMMENT 'Descrição do grupo.',
  `foto` VARCHAR(255) NOT NULL COMMENT 'URL da foto do grupo.',
  `status` TINYINT(1) NOT NULL COMMENT 'Status do grupo para verificar se o mesmo está ativo ou inativo.',
  `interesses_id` INT ZEROFILL NOT NULL COMMENT 'ID do interesse que o grupo possui.',
  PRIMARY KEY (`id`),
  UNIQUE INDEX `nome_UNIQUE` (`nome` ASC),
  INDEX `fk_grupos_interesses1_idx` (`interesses_id` ASC),
  CONSTRAINT `fk_grupos_interesses1`
    FOREIGN KEY (`interesses_id`)
    REFERENCES `db_exetasks`.`interesses` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Tabela para armazenar todos os grupos do sistema.';


-- -----------------------------------------------------
-- Table `db_exetasks`.`atividades`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_exetasks`.`atividades` (
  `id` INT ZEROFILL NOT NULL AUTO_INCREMENT COMMENT 'ID da atividade.',
  `nome` VARCHAR(20) NOT NULL COMMENT 'Nome da atividade.',
  `descricao` TEXT NOT NULL COMMENT 'Descrição da atividade.',
  `prazo` DATETIME NOT NULL COMMENT 'Prazo de entrega da atividade.',
  `experiencia` INT NOT NULL COMMENT 'Pontos de experiência que a atividade concede quando for concluida.',
  PRIMARY KEY (`id`))
ENGINE = InnoDB
COMMENT = 'Tabela para armazenar todas as atividades do sistema.';


-- -----------------------------------------------------
-- Table `db_exetasks`.`usuarios_has_grupos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_exetasks`.`usuarios_has_grupos` (
  `usuarios_id` INT ZEROFILL NOT NULL COMMENT 'ID dos usuários que pertencem aos grupos.',
  `grupos_id` INT ZEROFILL NOT NULL COMMENT 'ID dos grupos que os usuários estão inseridos.',
  `permissao` TINYINT(1) NOT NULL COMMENT 'Serve para verificar a categoria do usuário no grupo (administrador ou integrante).',
  `status` TINYINT(1) NOT NULL COMMENT 'Serve para verificar se o usuário está ativo no grupo ou não.',
  INDEX `fk_usuarios_has_grupos_grupos1_idx` (`grupos_id` ASC),
  INDEX `fk_usuarios_has_grupos_usuarios_idx` (`usuarios_id` ASC),
  PRIMARY KEY (`usuarios_id`, `grupos_id`),
  CONSTRAINT `fk_usuarios_has_grupos_usuarios`
    FOREIGN KEY (`usuarios_id`)
    REFERENCES `db_exetasks`.`usuarios` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_usuarios_has_grupos_grupos1`
    FOREIGN KEY (`grupos_id`)
    REFERENCES `db_exetasks`.`grupos` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Tabela para armazenar os grupos que os usuários estão inseridos.';


-- -----------------------------------------------------
-- Table `db_exetasks`.`grupos_has_atividades`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_exetasks`.`grupos_has_atividades` (
  `grupos_id` INT ZEROFILL NOT NULL COMMENT 'ID do grupo que possui atividades.',
  `atividades_id` INT ZEROFILL NOT NULL COMMENT 'ID das atividades que os grupos possuem.',
  INDEX `fk_grupos_has_atividades_atividades1_idx` (`atividades_id` ASC),
  INDEX `fk_grupos_has_atividades_grupos1_idx` (`grupos_id` ASC),
  PRIMARY KEY (`atividades_id`, `grupos_id`),
  CONSTRAINT `fk_grupos_has_atividades_grupos1`
    FOREIGN KEY (`grupos_id`)
    REFERENCES `db_exetasks`.`grupos` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_grupos_has_atividades_atividades1`
    FOREIGN KEY (`atividades_id`)
    REFERENCES `db_exetasks`.`atividades` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Tabela para armazenar todas as atividades dos grupos.';


-- -----------------------------------------------------
-- Table `db_exetasks`.`usuarios_has_atividades`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_exetasks`.`usuarios_has_atividades` (
  `usuarios_id` INT ZEROFILL NOT NULL COMMENT 'ID do usuário que possui atividades.',
  `atividades_id` INT ZEROFILL NOT NULL COMMENT 'ID das atividades dos usuários.',
  `status` INT NOT NULL COMMENT 'Verifica se a atividade foi concluída',
  PRIMARY KEY (`usuarios_id`, `atividades_id`),
  INDEX `fk_usuarios_has_atividades_atividades1_idx` (`atividades_id` ASC),
  INDEX `fk_usuarios_has_atividades_usuarios1_idx` (`usuarios_id` ASC),
  CONSTRAINT `fk_usuarios_has_atividades_usuarios1`
    FOREIGN KEY (`usuarios_id`)
    REFERENCES `db_exetasks`.`usuarios` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_usuarios_has_atividades_atividades1`
    FOREIGN KEY (`atividades_id`)
    REFERENCES `db_exetasks`.`atividades` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Tabela para armazenar todas as atividades dos usuários.';


-- -----------------------------------------------------
-- Table `db_exetasks`.`usuarios_has_interesses`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_exetasks`.`usuarios_has_interesses` (
  `usuarios_id` INT ZEROFILL NOT NULL COMMENT 'ID do usuário que possui interesses.',
  `interesses_id` INT ZEROFILL NOT NULL COMMENT 'ID dos interesses dos usuários.',
  PRIMARY KEY (`usuarios_id`, `interesses_id`),
  INDEX `fk_usuarios_has_interesses_interesses1_idx` (`interesses_id` ASC),
  INDEX `fk_usuarios_has_interesses_usuarios1_idx` (`usuarios_id` ASC),
  CONSTRAINT `fk_usuarios_has_interesses_usuarios1`
    FOREIGN KEY (`usuarios_id`)
    REFERENCES `db_exetasks`.`usuarios` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_usuarios_has_interesses_interesses1`
    FOREIGN KEY (`interesses_id`)
    REFERENCES `db_exetasks`.`interesses` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Tabela para armazenar os interesses dos usuários.';


-- -----------------------------------------------------
-- Table `db_exetasks`.`usuarios_has_usuarios`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_exetasks`.`usuarios_has_usuarios` (
  `usuarios_id` INT ZEROFILL NOT NULL COMMENT 'Usuário que possui amigo.',
  `usuarios_idamigos` INT ZEROFILL NOT NULL COMMENT 'Usuário que é o amigo.',
  PRIMARY KEY (`usuarios_id`, `usuarios_idamigos`),
  INDEX `fk_usuarios_has_usuarios_usuarios2_idx` (`usuarios_idamigos` ASC),
  INDEX `fk_usuarios_has_usuarios_usuarios1_idx` (`usuarios_id` ASC),
  CONSTRAINT `fk_usuarios_has_usuarios_usuarios1`
    FOREIGN KEY (`usuarios_id`)
    REFERENCES `db_exetasks`.`usuarios` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_usuarios_has_usuarios_usuarios2`
    FOREIGN KEY (`usuarios_idamigos`)
    REFERENCES `db_exetasks`.`usuarios` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Tabela para armazenar lista de amigos.';


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

INSERT INTO interesses(nome) VALUES("Matemática");
INSERT INTO interesses(nome) VALUES("Português");
INSERT INTO interesses(nome) VALUES("Química");
INSERT INTO interesses(nome) VALUES("Física");
INSERT INTO interesses(nome) VALUES("Geografia");
INSERT INTO interesses(nome) VALUES("Biologia");
INSERT INTO interesses(nome) VALUES("Filosofia");
INSERT INTO interesses(nome) VALUES("Idiomas");
INSERT INTO interesses(nome) VALUES("Informática");
INSERT INTO interesses(nome) VALUES("Engenharia");
INSERT INTO interesses(nome) VALUES("Música");
INSERT INTO interesses(nome) VALUES("História");
INSERT INTO interesses(nome) VALUES("Outros");
